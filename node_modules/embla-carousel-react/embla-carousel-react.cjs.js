'use strict';

var react = require('react');
var EmblaCarousel = require('embla-carousel');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var EmblaCarousel__default = /*#__PURE__*/_interopDefaultLegacy(EmblaCarousel);

function canUseDOM() {
  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
}
function sortAndMapPluginToOptions(plugins) {
  return plugins.concat().sort(function (a, b) {
    return a.name > b.name ? 1 : -1;
  }).map(function (plugin) {
    return plugin.options;
  });
}
function arePluginsEqual(pluginsA, pluginsB) {
  if (pluginsA.length !== pluginsB.length) return false;
  var areEqual = EmblaCarousel__default["default"].optionsHandler().areEqual;
  var optionsA = sortAndMapPluginToOptions(pluginsA);
  var optionsB = sortAndMapPluginToOptions(pluginsB);
  return optionsA.every(function (optionA, index) {
    var optionB = optionsB[index];
    return areEqual(optionA, optionB);
  });
}

function useEmblaCarousel(options, plugins) {
  if (options === void 0) {
    options = {};
  }

  if (plugins === void 0) {
    plugins = [];
  }

  var optionsHandler = react.useRef(EmblaCarousel__default["default"].optionsHandler());
  var storedOptions = react.useRef(options);
  var storedPlugins = react.useRef(plugins);

  var _a = react.useState(),
      embla = _a[0],
      setEmbla = _a[1];

  var _b = react.useState(),
      viewport = _b[0],
      setViewport = _b[1];

  var reInit = react.useCallback(function () {
    if (embla) embla.reInit(storedOptions.current, storedPlugins.current);
  }, [embla]);
  react.useEffect(function () {
    if (canUseDOM() && viewport) {
      EmblaCarousel__default["default"].globalOptions = useEmblaCarousel.globalOptions;
      var newEmbla_1 = EmblaCarousel__default["default"](viewport, storedOptions.current, storedPlugins.current);
      setEmbla(newEmbla_1);
      return function () {
        return newEmbla_1.destroy();
      };
    } else {
      setEmbla(undefined);
    }
  }, [viewport, setEmbla]);
  react.useEffect(function () {
    if (optionsHandler.current.areEqual(storedOptions.current, options)) return;
    storedOptions.current = options;
    reInit();
  }, [options, reInit]);
  react.useEffect(function () {
    if (arePluginsEqual(storedPlugins.current, plugins)) return;
    storedPlugins.current = plugins;
    reInit();
  }, [plugins, reInit]);
  return [setViewport, embla];
}

useEmblaCarousel.globalOptions = undefined;

module.exports = useEmblaCarousel;
//# sourceMappingURL=embla-carousel-react.cjs.js.map
